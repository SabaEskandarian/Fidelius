/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;
    from "sgx_display/sgx_display.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_print_time([in, string] const char *str);

        sgx_status_t enc_make_http_request([in, string] const char* method, [in, string] const char* url, [in, string] const char* headers, [in, string] const char* request_data, [out, count=16] uint8_t* p_mac, [out] int* ret_code);

        void ocall_write_file([in, string] const char *fname, [in, size=len] const char* data, size_t len);

        size_t ocall_get_file_size([in, string] const char *fname);

        void ocall_read_file([in, string] const char *fname, [out, size=len] char* data, size_t len);
    };

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message,
                                                  size_t message_size,
                                                  [in,size=mac_size] uint8_t* mac,
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);

        public sgx_status_t run_js([in, out, size=len] char* code, size_t len, [in, size=len2] const uint8_t* code_sig, size_t len2);

        public sgx_status_t add_form([in, size=len] const char* name, size_t len, [in, size=origin_len] const char* origin, size_t origin_len, uint16_t x, uint16_t y);

        public sgx_status_t add_input([in, size=len_form] const char* form_name, size_t len_form, [in, size=len_input] const char* input_name, size_t len_input, [in, size=sig_form_size] const uint8_t* sig_form, size_t sig_form_size, int validate, uint16_t x, uint16_t y, uint16_t height, uint16_t width);

        public sgx_status_t onFocus([in, string] const char* formName, [in, string] const char* inputName, uint16_t x, uint16_t y, uint16_t width, uint16_t height);

        public sgx_status_t onBlur();

        public uint32_t form_len([in, string] const char* formName);

        public sgx_status_t submit_form([in, string] const char* formName, [out,size=encr_size] uint8_t* dest, uint32_t encr_size, [out,count=16] uint8_t* gcm_mac);

        public sgx_status_t gcm_decrypt([user_check] uint8_t *p_src, uint32_t src_len, [in, size=1000] uint8_t *p_dst, [in] uint8_t *p_iv,  [in] sgx_aes_gcm_128bit_tag_t *p_in_mac);
        
        public sgx_status_t get_keyboard_chars([in, size = 29] uint8_t *p_src);

        public sgx_status_t test_decryption([in,size=form_size] uint8_t* form, uint32_t form_size, [in,count=16] uint8_t* gcm_mac);

        public void get_http_response([in, size=len] char* response, size_t len);
    };

};
