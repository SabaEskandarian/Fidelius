argc: 2 
argv[0]: /home/jonathan/Fidelius-trial/tinyjs_attestation_enclave/EnclaveManager 
argv[1]: chrome-extension://gepngkmekmomjojiebkbdbfcfclnglom/ 

Call sgx_get_extended_epid_group_id success.
MSG0 body generated -
4 bytes:
{
0x0, 0x0, 0x0, 0x0 
}

Sending msg0 to remote attestation service provider.

Sent MSG0 to remote attestation service.

Call sgx_create_enclave success.
Call enclave_init_ra success.
Call sgx_ra_get_msg1 success.

MSG1 body generated -
68 bytes:
{
0xbf, 0xd1, 0xf7, 0xba, 0x7a, 0x4c, 0x7c, 0x19, 
0x88, 0x8d, 0xc5, 0x5, 0xbf, 0x99, 0x79, 0xd7, 
0x32, 0x32, 0x44, 0xc1, 0x54, 0xd0, 0xde, 0xdb, 
0xf8, 0xeb, 0x84, 0xf, 0x0, 0xe8, 0x5c, 0xcb, 
0xea, 0x1e, 0xb3, 0x8b, 0xaa, 0xc4, 0xca, 0xba, 
0x48, 0xd0, 0x61, 0x6b, 0xa, 0x5, 0xfd, 0x31, 
0x23, 0xf0, 0x60, 0x65, 0xdd, 0x76, 0x79, 0x1c, 
0xc0, 0x96, 0x57, 0x91, 0x39, 0xdd, 0xf2, 0xac, 
0xb, 0x0, 0x0, 0x0 
}

Instead of using the recently generated MSG1, we will use the following precomputed MSG1 -
68 bytes:
{
0xe8, 0xcf, 0xf, 0x97, 0x8a, 0xf4, 0x24, 0x8a, 
0xf5, 0x5b, 0x56, 0xf0, 0xac, 0x7f, 0x78, 0x39, 
0x71, 0x10, 0xb8, 0xdc, 0x88, 0xd, 0x50, 0xf0, 
0x39, 0x85, 0x37, 0xfe, 0xad, 0x1f, 0xc7, 0x59, 
0xc7, 0x23, 0x81, 0xfd, 0x4a, 0x2, 0x48, 0xdf, 
0xd3, 0x74, 0xda, 0x45, 0x48, 0x62, 0xc8, 0xb6, 
0x73, 0x43, 0x26, 0x42, 0x8f, 0x1f, 0x89, 0x17, 
0xe7, 0xa9, 0x2a, 0xf5, 0x27, 0xb3, 0xcc, 0x4d, 
0x3, 0x1, 0x0, 0x0 
}

Sending msg1 to remote attestation service provider.Expecting msg2 back.

Sent MSG1 to remote attestation service provider. Received the following MSG2:

A more descriptive representation of MSG2:
RESPONSE TYPE:   0x2
RESPONSE STATUS: 0x0 0x0
RESPONSE BODY SIZE: 168
MSG2 gb - 64 bytes:
{
0x6a, 0x83, 0xdc, 0x84, 0xd4, 0x4c, 0x8a, 0xbb, 
0x5e, 0x42, 0xaf, 0xee, 0x8d, 0xe9, 0xf4, 0x57, 
0x71, 0xfd, 0x73, 0x66, 0xd7, 0xfa, 0xad, 0xfa, 
0xf2, 0x17, 0x14, 0xdd, 0x5a, 0xb9, 0x9e, 0x97, 
0x79, 0xa7, 0x38, 0x72, 0xf2, 0xb8, 0xd6, 0xbe, 
0x18, 0x91, 0x7f, 0xf7, 0xb5, 0xd3, 0xe5, 0x64, 
0x9b, 0x12, 0x18, 0xaf, 0x39, 0x29, 0x6c, 0x24, 
0x19, 0x38, 0x29, 0xb, 0xc6, 0xac, 0xc, 0x62 
}
MSG2 spid - 16 bytes:
{
0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 
0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
}
MSG2 quote_type : 1
MSG2 kdf_id : 1
MSG2 sign_gb_ga - 64 bytes:
{
0x6a, 0x83, 0xdc, 0x84, 0xd4, 0x4c, 0x8a, 0xbb, 
0x5e, 0x42, 0xaf, 0xee, 0x8d, 0xe9, 0xf4, 0x57, 
0x71, 0xfd, 0x73, 0x66, 0xd7, 0xfa, 0xad, 0xfa, 
0xf2, 0x17, 0x14, 0xdd, 0x5a, 0xb9, 0x9e, 0x97, 
0x6, 0x10, 0x58, 0x61, 0xa5, 0xbf, 0x7d, 0x2e, 
0xab, 0xcc, 0x1a, 0x3e, 0x4f, 0x44, 0x15, 0xe7, 
0x91, 0xca, 0x64, 0x2b, 0x42, 0xb7, 0x53, 0xd9, 
0x71, 0x37, 0xf1, 0x9b, 0x31, 0xb5, 0xa5, 0x6b 
}
MSG2 mac - 16 bytes:
{
0xf8, 0xfa, 0x64, 0xfe, 0x7a, 0x9e, 0xdc, 0xf4, 
0xf0, 0x59, 0xbd, 0x78, 0x27, 0xc2, 0x55, 0xb9 
}
MSG2 sig_rl - 
( null )

Verification COMPLETE. Remote attestation service provider generated a matching MSG2.

Because MSG1 was a precomputed value, the MSG3 we use will also be. PRECOMPUTED MSG3 - 

Sent MSG3 successfully. Received an attestation result message back
.
ATTESTATION RESULT RECEIVED - 
Because we used precomputed values for the messages, the attestation result message will not pass further verification tests, so we will skip them.

Call enclave_ra_close success.
